// Permutahedron
// File: polytopes/build_functions/build_permutahedron.js

import { Polytope } from '../Polytope.js';

// ---------- Common Helpers ----------
function dot(u, v) { return u.reduce((s, ui, k) => s + ui * v[k], 0); }
function sub(u, v) { return u.map((ui, k) => ui - v[k]); }
function scale(u, s) { return u.map(ui => ui * s); }
function norm(u) { return Math.hypot(...u); }
function orthonormalBasis(vectors) {
  const es = [];
  for (let v of vectors) {
    let u = [...v];
    for (let e of es) u = sub(u, scale(e, dot(u, e)));
    const n = norm(u);
    if (n > 1e-8) es.push(scale(u, 1 / n));
  }
  return es;
}
function permutations(arr) {
  if (arr.length <= 1) return [arr];
  return arr.flatMap((x, i) =>
    permutations(arr.slice(0, i).concat(arr.slice(i + 1))).map(rest => [x, ...rest])
  );
}
function signedPermutations(arr) {
  const signs = arr.map(() => [-1, 1]);
  const allSigns = signs.reduce((acc, curr) => acc.flatMap(a => curr.map(s => [...a, s])), [[]]);
  return permutations(arr).flatMap(p => allSigns.map(signs => p.map((v, i) => v * signs[i])));
}

// ---------- Type A (S₄) ----------
function buildTypeA() {
  const perms4 = permutations([1, 2, 3, 4]);
  const basis = [[1, -1, 0, 0], [0, 1, -1, 0], [0, 0, 1, -1]];
  const ons = orthonormalBasis(basis);
  return perms4.map(p => ons.map(e => dot(p, e)));
}

// ---------- Type B/C (signed S₃) ----------
function buildTypeBC() {
  const base = [1, 2, 3];
  const pts = signedPermutations(base);
  const centroid = pts.reduce((c, p) => p.map((x, i) => c[i] + x), [0, 0, 0])
                      .map(x => x / pts.length);
  return pts.map(p => p.map((x, i) => x - centroid[i]));
}


//----------- Type H3 ----------
// It tried hard to do this in a smart way
// at the end of the day this is the best it could do.
// We (fellow humans) are still superior.
function buildTypeH3() {
const vertices = [
  [0.6180339887, 0.6180339887, 4.618033989],
[-0.6180339887, -0.6180339887, -4.618033989],
[1.236067977, -1.618033989, 4.236067977],
[-1.236067977, 1.618033989, -4.236067977],
[-1.236067977, -1.618033989, -4.236067977],
[0.6180339887, 2.618033989, 3.854101966],
[0.6180339887, -2.618033989, -3.854101966],
[-0.6180339887, 2.618033989, 3.854101966],
[-0.6180339887, -2.618033989, -3.854101966],
[2.236067977, 2.0, 3.618033989],
[2.236067977, 2.0, -3.618033989],
[-2.236067977, 2.0, 3.618033989],
[-2.236067977, 2.0, -3.618033989],
[1.618033989, 3.0, -3.236067977],
[-1.618033989, -3.0, 3.236067977],
[0.6180339887, 4.618033989, 0.6180339887],
[0.6180339887, -4.618033989, 0.6180339887],
[-0.6180339887, 4.618033989, 0.6180339887],
[-0.6180339887, -4.618033989, 0.6180339887],
[0.6180339887, 4.618033989, -0.6180339887],
[0.6180339887, -4.618033989, -0.6180339887],
[-0.6180339887, 4.618033989, -0.6180339887],
[-0.6180339887, -4.618033989, -0.6180339887],
[1.618033989, 4.236067977, 1.236067977],
[1.618033989, -4.236067977, 1.236067977],
[-1.618033989, 4.236067977, 1.236067977],
[-1.618033989, -4.236067977, 1.236067977],
[1.618033989, 4.236067977, -1.236067977],
[1.618033989, -4.236067977, -1.236067977],
[-1.618033989, 4.236067977, -1.236067977],
[-1.618033989, -4.236067977, -1.236067977],
[2.618033989, 3.854101966, 0.6180339887],
[2.618033989, -3.854101966, 0.6180339887],
[-2.618033989, 3.854101966, 0.6180339887],
[-2.618033989, -3.854101966, 0.6180339887],
[2.618033989, 3.854101966, -0.6180339887],
[2.618033989, -3.854101966, -0.6180339887],
[-2.618033989, 3.854101966, -0.6180339887],
[-2.618033989, -3.854101966, -0.6180339887],
[2.0, 3.618033989, 2.236067977],
[2.0, -3.618033989, 2.236067977],
[-2.0, 3.618033989, 2.236067977],
[-2.0, -3.618033989, 2.236067977],
[2.0, 3.618033989, -2.236067977],
[2.0, -3.618033989, -2.236067977],
[-2.0, 3.618033989, -2.236067977],
[-2.0, -3.618033989, -2.236067977],
[3.0, 3.236067977, 1.618033989],
[3.0, -3.236067977, 1.618033989],
[-3.0, 3.236067977, 1.618033989],
[-3.0, -3.236067977, 1.618033989],
[3.0, 3.236067977, -1.618033989],
[3.0, -3.236067977, -1.618033989],
[-3.0, 3.236067977, -1.618033989],
[-3.0, -3.236067977, -1.618033989],
[4.618033989, 0.6180339887, 0.6180339887],
[-4.618033989, 0.6180339887, 0.6180339887],
[4.618033989, 0.6180339887, -0.6180339887],
[-4.618033989, 0.6180339887, -0.6180339887],
[4.618033989, -0.6180339887, 0.6180339887],
[-4.618033989, -0.6180339887, 0.6180339887],
[4.618033989, -0.6180339887, -0.6180339887],
[-4.618033989, -0.6180339887, -0.6180339887],
[4.236067977, 1.236067977, 1.618033989],
[-4.236067977, 1.236067977, 1.618033989],
[4.236067977, 1.236067977, -1.618033989],
[-4.236067977, 1.236067977, -1.618033989],
[4.236067977, -1.236067977, 1.618033989],
[-4.236067977, -1.236067977, 1.618033989],
[4.236067977, -1.236067977, -1.618033989],
[-4.236067977, -1.236067977, -1.618033989],
[3.854101966, 0.6180339887, 2.618033989],
[-3.854101966, 0.6180339887, 2.618033989],
[3.854101966, 0.6180339887, -2.618033989],
[-3.854101966, 0.6180339887, -2.618033989],
[3.854101966, -0.6180339887, 2.618033989],
[-3.854101966, -0.6180339887, 2.618033989],
[3.854101966, -0.6180339887, -2.618033989],
[-3.854101966, -0.6180339887, -2.618033989],
[3.618033989, 2.236067977, 2.0],
[-3.618033989, 2.236067977, 2.0],
[3.618033989, 2.236067977, -2.0],
[-3.618033989, 2.236067977, -2.0],
[3.618033989, -2.236067977, 2.0],
[-3.618033989, -2.236067977, 2.0],
[3.618033989, -2.236067977, -2.0],
[-3.618033989, -2.236067977, -2.0],
[3.236067977, 1.618033989, 3.0],
[-3.236067977, 1.618033989, 3.0],
[3.236067977, 1.618033989, -3.0],
[-3.236067977, 1.618033989, -3.0],
[3.236067977, -1.618033989, 3.0],
[-3.236067977, -1.618033989, 3.0],
[3.236067977, -1.618033989, -3.0],
[-3.236067977, -1.618033989, -3.0],
[0.6180339887, 0.6180339887, -4.618033989],
[0.6180339887, -0.6180339887, 4.618033989],
[0.6180339887, -0.6180339887, -4.618033989],
[-0.6180339887, 0.6180339887, 4.618033989],
[-0.6180339887, 0.6180339887, -4.618033989],
[-0.6180339887, -0.6180339887, 4.618033989],
[1.236067977, 1.618033989, 4.236067977],
[1.236067977, 1.618033989, -4.236067977],
[1.236067977, -1.618033989, -4.236067977],
[-1.236067977, 1.618033989, 4.236067977],
[-1.236067977, -1.618033989, 4.236067977],
[0.6180339887, 2.618033989, -3.854101966],
[0.6180339887, -2.618033989, 3.854101966],
[-0.6180339887, 2.618033989, -3.854101966],
[-0.6180339887, -2.618033989, 3.854101966],
[2.236067977, -2.0, 3.618033989],
[2.236067977, -2.0, -3.618033989],
[-2.236067977, -2.0, 3.618033989],
[-2.236067977, -2.0, -3.618033989],
[1.618033989, 3.0, 3.236067977],
[1.618033989, -3.0, 3.236067977],
[1.618033989, -3.0, -3.236067977],
[-1.618033989, 3.0, 3.236067977],
[-1.618033989, 3.0, -3.236067977],
[-1.618033989, -3.0, -3.236067977]
];

  return vertices;
}
// ---------- Unified Parametric Builder ----------
export function build_permutahedron(params = { type: 'A3' }) {
  let vertices;
  switch (params.type) {
    case 'B3/C3': vertices = buildTypeBC(); break;
    //case 'H3': vertices = buildTypeH3(); break;
    case 'A3':
    default: vertices = buildTypeA(); break;
  }

  return new Polytope(vertices, {
    name: `Permutahedron`,
    parameters: params,
    parameterSchema: build_permutahedron.defaults
  });
}

build_permutahedron.defaults = {
  type: {
    type: 'dropdown',
    options: ['A3', 'B3/C3'],
    default: 'A3',
    name: 'Coxeter Type',
    description: 'Selects the root system that defines the permutahedron'
  }
};

